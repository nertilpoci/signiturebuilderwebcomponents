/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SignitureBuilder {
        "fileUrl": string;
        "getFields": () => Promise<FormField[]>;
        "setActiveFieldType": (type: "signature" | "name") => Promise<void>;
    }
}
export interface SignitureBuilderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSignitureBuilderElement;
}
declare global {
    interface HTMLSignitureBuilderElementEventMap {
        "fieldAdded": FormField;
        "fieldRemoved": { fieldId: string };
        "fieldsChanged": FormField[];
        "pdfLoaded": { pages: number };
    }
    interface HTMLSignitureBuilderElement extends Components.SignitureBuilder, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSignitureBuilderElementEventMap>(type: K, listener: (this: HTMLSignitureBuilderElement, ev: SignitureBuilderCustomEvent<HTMLSignitureBuilderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSignitureBuilderElementEventMap>(type: K, listener: (this: HTMLSignitureBuilderElement, ev: SignitureBuilderCustomEvent<HTMLSignitureBuilderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSignitureBuilderElement: {
        prototype: HTMLSignitureBuilderElement;
        new (): HTMLSignitureBuilderElement;
    };
    interface HTMLElementTagNameMap {
        "signiture-builder": HTMLSignitureBuilderElement;
    }
}
declare namespace LocalJSX {
    interface SignitureBuilder {
        "fileUrl"?: string;
        "onFieldAdded"?: (event: SignitureBuilderCustomEvent<FormField>) => void;
        "onFieldRemoved"?: (event: SignitureBuilderCustomEvent<{ fieldId: string }>) => void;
        "onFieldsChanged"?: (event: SignitureBuilderCustomEvent<FormField[]>) => void;
        "onPdfLoaded"?: (event: SignitureBuilderCustomEvent<{ pages: number }>) => void;
    }
    interface IntrinsicElements {
        "signiture-builder": SignitureBuilder;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "signiture-builder": LocalJSX.SignitureBuilder & JSXBase.HTMLAttributes<HTMLSignitureBuilderElement>;
        }
    }
}
